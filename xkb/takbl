default partial alphanumeric_keys
xkb_symbols "basic" {

    include "level3(ralt_switch)"
    include "keypad(oss)"

    name[Group1]= "Tony Aldon (kbl basic form)";

    // First row
    key <TLDE> { [ ] }; // 
    key <AE01> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [	] }; // 
    key <AE02> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [	less,           less,						braceleft                        ] }; // < < {  
    key <AE03> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [  greater,        greater,				braceright			                 ] }; // > > }    
    key <AE04> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [ 	p,              P, 							Prior						                 ] }; // p P <prior>  
    key <AE05> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [  k,		          K,  						quotedbl				                 ] }; // k K "
    key <AE06> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [  dollar, 				dollar, 				EuroSign   			                 ] }; // $ $ €
    key <AE07> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [  plus, 					plus, 					asterisk  			                 ] }; // + + *
    key <AE08> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [  minus, 					minus,					asciicircum			                 ] }; // - - ^
    key <AE09> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [  0, 							0							        				                   ] }; // 0 0 
    key <AE10> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [  1, 							1,       				plus														 ] }; // 1 1 +
    key <AE11> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [ 	2, 							2,							minus   		         						 ] }; // 2 2 -
    key <AE12> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [  3, 							3,							asterisk 												 ] }; // 3 3 *

    // Second row
    key <AD01> {                                             [  w,              W,              dead_circumflex                  ] }; // w W ^  
    key <AD02> {                                             [  b,              B,      				parenleft                        ] }; // b B ( 
    key <AD03> {                                             [  n,              N, 							Next                             ] }; // n N <next> 
    key <AD04> {                                             [  f,	       		  F,      				parenright    	                 ] }; // f F  )
    key <AD05> {                                             [  Tab, 	       	  Tab, 						slash     		 	                 ] }; // Tab Tab /
    key <AD06> {                                             [  v,              V,       				bar    			                     ] }; // v V |
    key <AD07> {                                             [  q,              Q,							backslash			                   ] }; // q Q \
    key <AD08> {                                             [  d,              D,							Up	                             ] }; // d D <up>
    key <AD09> {                                             [  l,              L,	    				equal                            ] }; // l L = 
    key <AD10> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [  j,              4,              J 			                         ] }; // j 4 J
    key <AD11> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [  z,              5,              Z                                ] }; // z 5 Z
    key <AD12> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [  6,   						6,							period                  		     ] }; // 6 6 .

    // Third row
    key <AC01> {                                             [  a,              A,              bracketleft 	 	                 ] }; // a A [ 
    key <AC02> {                                             [  u,              U,              bracketright	                   ] }; // u U ]
    key <AC03> {                                             [  i,              I, 	            period,         dead_diaeresis   ] }; // i I . ¨  ̈ 
    key <AC04> {                                             [  e,              E,              dead_acute 	       	             ] }; // e E ˊ
    key <AC05> {                                             [  BackSpace,      BackSpace, 			comma          	   							 ] }; // BackSpace BackSpace ,
    key <AC06> {                                             [  t,              T, 							percent 		   									 ] }; // t T %
    key <AC07> {                                             [  0xfe03,         0xfe03,   			Left 	   												 ] }; // Altgr Altgr <left>
    key <AC08> {                                             [  s,              S,      				Down       											 ] }; // s S <down>
    key <AC09> {                                             [  r,              R,     					Right 	   											 ] }; // r R <right>
    key <AC10> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [  m,              7,							M	 	   													 ] }; // m 7 M
    key <AC11> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [  ccedilla,     	8, 							Ccedilla 		   									 ] }; // ç 8 Ç 
    key <BKSL> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [  9,							9,						  asciicircum											 ] }; // 9 9

    // Fourth row
    key <LSGT> {                                             [ exclam,			    exclamdown,     question,       questiondown     ] }; // ! ¡ ? ¿
    key <AB01> {                                             [ y,               Y,							dead_grave               	       ] }; // y Y `
    key <AB02> {                                             [ x,               X,      				colon         		   						 ] }; // x X :  
    key <AB03> {                                             [ o,               O,      				semicolon      		   						 ] }; // o O ;
    key <AB04> {                                             [ Return,          Return, 				apostrophe		   								 ] }; // Return Returnt '
    key <AB05> {                                             [ 0xfe03, 					0xfe03, 				dead_tilde                   		 ] }; // Altgr Altgr ~
    key <AB06> {                                             [ c,            		C,      				at   	       		   							 ] }; // c C @
    key <AB07> {                                             [ 0xffe4            	  			   		      						 							 ] }; // Control_R  
    key <AB08> {                                             [ g,            		G,              ampersand    	                   ] }; // g G &
    key <AB09> {                                             [ h,            		H,              numbersign          	 		   		 ] }; // h H #
    key <AB10> {                                             [ 0,               0																								 ] }; // 0 0

    key <SPCE> { 																						 [ space, 	        space,				  underscore                       ] }; // space space _ 
};


